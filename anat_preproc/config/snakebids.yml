bids_dir: '/path/to/bids_dir'
output_dir: '/path/to/output_dir'

#enable printing debug statements during parsing -- disable if generating dag visualization
debug: False

derivatives: False #will search in bids/derivatives if True; can also be path(s) to derivatives datasets

#list of analysis levels in the bids app
analysis_levels: &analysis_levels
 - participant
 - skstrip

#mapping from analysis_level to set of target rules or files
targets_by_analysis_level:
  participant:
    - all
  skstrip:
    - all_skstrip

#this configures the pybids grabber - create an entry for each type of input you want to grab
# indexed by name of input
#   dictionary for each input is passed directly to pybids get()
#    https://bids-standard.github.io/pybids/generated/bids.layout.BIDSLayout.html#bids.layout.BIDSLayout.get

pybids_inputs:
  uni:
    filters:
      suffix: 'MP2RAGE'
      extension: '.nii.gz'
      datatype: 'anat'
      acquisition: 'UNI'
      invalid_filters: 'allow'
      echo: null
    wildcards:
      - subject
      - session
      - acquisition
      - task
      - run
  inv2:
    filters:
      suffix: 'MP2RAGE'
      extension: '.nii.gz'
      datatype: 'anat'
      inv: 2
      invalid_filters: 'allow'
      echo: null
    wildcards:
      - subject
      - session
      - acquisition
      - task
      - run
  t1w:
    filters:
      suffix: 'T1w'
      extension: '.nii.gz'
      datatype: 'anat'
      invalid_filters: 'allow'
    wildcards:
      - subject
      - session
      - task
      - run
  t2w:
    filters:
      suffix: 'T2w'
      extension: '.nii.gz'
      datatype: 'anat'
      acquisition: 'SPACE'
      invalid_filters: 'allow'
    wildcards:
      - subject
      - session
      - task
      - run
  

#this configures the options to save the BIDSLayout
# by default, database is not saved (uncomment to save)
# NOTE: pybids_db_dir must be an absolute path
# pybids_db_dir: '/path/to/db_dir' # Leave blank if you do not wish to use this
# pybids_db_reset: False # Change this to true to update the database

#configuration for the command-line parameters to make available
# passed on the argparse add_argument()
parse_args:

#---  core BIDS-app options --- (do not modify below)

  bids_dir:
    help: The directory with the input dataset formatted according
          to the BIDS standard.

  output_dir:
    help: The directory where the output files
          should be stored. If you are running group level analysis
          this folder should be prepopulated with the results of the
          participant level analysis.

  analysis_level:
    help: Level of the analysis that will be performed.
    choices: *analysis_levels

  --participant_label:
    help: The label(s) of the participant(s) that should be analyzed. The label
          corresponds to sub-<participant_label> from the BIDS spec
          (so it does not include "sub-"). If this parameter is not
          provided all subjects should be analyzed. Multiple
          participants can be specified with a space separated list.
    nargs: '+'

  --exclude_participant_label:
    help: The label(s) of the participant(s) that should be excluded. The label
          corresponds to sub-<participant_label> from the BIDS spec
          (so it does not include "sub-"). If this parameter is not
          provided all subjects should be analyzed. Multiple
          participants can be specified with a space separated list.
    nargs: '+'

  --derivatives:
    help: 'Path(s) to a derivatives dataset, for folder(s) that contains multiple derivatives datasets (default: %(default)s) '
    default: false
    nargs: '+'

 # custom command-line parameters can then be added, these will get added to the config
 # below is an example to override config['bet_frac']
  --fs_license:
    help: 'Provide path to freesurfer license text file.'
    default: false
    required: false
    nargs: 1
  
  --grad_coef:
    help: 'Provide path to gradient correction coefficient file. Gradient correction dis skipped if file is not specified.'
    default: false
    required: false
    nargs: 1
  
  --fmriprep_run_func:
    help: 'Run functional preprocessing.'
    default: false
    required: false
    action: store_true

  --fmriprep_opts:
    help: 'Provide custom fmriprep arguments flags.'
    default: '--anat-only'
    required: false
    nargs: '+'
  
  --ciftify_opts:
    help: 'Provide custom ciftify_recon_all command argument flags.'
    default: '--resample-to-T1w32k'
    required: false
    nargs: '+'
  
  --graham:
    help: 'Use containers on compute canada graham.'
    default: false
    action: store_true
  
  --gen_t1:
    help: 'Use 3dMPRAGEise to generate T1w images from UNI and INV2 images.'
    default: false
    action: store_true

  --use_t2:
    help: 'Toggle for allowing pipeline to include T2w in fMRIprep for freesurfer reconstruction. (currently broken)'
    default: false
    action: store_true


#--- workflow specific configuration -- below is just an example:


#singularity containers
singularity:
    graham:
      afni: '/project/ctb-akhanf/myousif9/containers/afni_make_build_latest.sif'
      ciftify: '/project/ctb-akhanf/myousif9/containers/fmriprep_ciftify_v1.3.2-2.3.3.sif'
      fmriprep: '/project/ctb-akhanf/myousif9/containers/fmriprep_22.0.1.sif'
      gradcorrect: '/project/ctb-akhanf/myousif9/containers/gradcorrect_v0.0.3a.sif'
      mriqc: '/project/ctb-akhanf/myousif9/containers/mriqc-0.16.1.simg'
      synthstrip: '/project/ctb-akhanf/myousif9/containers/synthstrip.1.1.sif'
    docker:
      afni: 'docker://afni/afni_make_build:AFNI_22.2.10'
      ciftify: 'docker://tigrlab/fmriprep_ciftify:v1.3.2-2.3.3' 
      fmriprep: docker://nipreps/fmriprep:22.0.1'
      gradcorrect: 'docker://khanlab/gradcorrect:v0.0.3a'
      mriqc: 'docker://poldracklab/mriqc:latest'
      synthstrip: 'docker://freesurfer/synthstrip:1.1'